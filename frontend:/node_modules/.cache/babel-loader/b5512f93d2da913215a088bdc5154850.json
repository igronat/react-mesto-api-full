{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      address,\n      headers\n    } = _ref;\n    this._address = address;\n    this._headers = headers;\n  }\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // если ошибка, отклоняем промис\n\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  } // получаем информацию профиля\n\n\n  getProfileInfo() {\n    return fetch(`${this._address}/users/me`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  } // отправляем информацию об изменении профиля\n\n\n  getProfileInfo(data) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.job\n      })\n    }).then(this._handleResponse);\n  } // отправляем информацию об изменении аватара\n\n\n  avatarProfile(data) {\n    return fetch(`${this._address}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._handleResponse);\n  } // получаем карточки\n\n\n  getInitialCards() {\n    return fetch(`${this._address}/cards`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  } // добавляем новую карточку\n\n\n  addCard(data) {\n    return fetch(`${this._address}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.mesto,\n        link: data.link,\n        id: data.id\n      })\n    }).then(this._handleResponse);\n  } // отправляем информацию об удалении карточки\n\n\n  deleteCard(id) {\n    return fetch(`${this._address}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } // отправляем информацию о лайке\n\n\n  putLikes(id) {\n    return fetch(`${this._address}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._handleResponse);\n  } // отправляем информацию об удалении лайка\n\n\n  deleteLikes(id) {\n    return fetch(`${this._address}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n}\n\n; // подключаем к серверу\n\nconst api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1/cohort-35',\n  headers: {\n    authorization: '4720a964-d446-4c50-91af-e4bae21204bc',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/TommyRadin/Desktop/мои веб разработки/mesto-react/src/utils/Api.js"],"names":["Api","constructor","address","headers","_address","_headers","_handleResponse","res","ok","json","Promise","reject","status","getProfileInfo","fetch","then","data","method","body","JSON","stringify","name","about","job","avatarProfile","avatar","getInitialCards","addCard","mesto","link","id","deleteCard","putLikes","deleteLikes","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor({address, headers}) {\n        this._address = address;\n        this._headers = headers\n    }\n\n    _handleResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        // если ошибка, отклоняем промис\n        return Promise.reject(`Ошибка: ${res.status}`)\n\n    }\n\n    // получаем информацию профиля\n    getProfileInfo() {\n        return fetch(`${this._address}/users/me`, {\n            headers: this._headers\n        })\n        .then(this._handleResponse);\n    \n    }\n\n    // отправляем информацию об изменении профиля\n    getProfileInfo(data) {\n     return fetch(`${this._address}/users/me`, {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify ({\n            name: data.name,\n            about: data.job,\n            \n            })\n     })\n     .then(this._handleResponse); \n \n    }\n\n    // отправляем информацию об изменении аватара\n    avatarProfile(data) {\n     return fetch(`${this._address}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify ({\n            avatar: data.avatar\n        })\n     })\n     .then(this._handleResponse); \n \n    }\n\n    // получаем карточки\n    getInitialCards() {\n       return fetch(`${this._address}/cards`, {\n            headers: this._headers\n        })\n        .then(this._handleResponse);\n\n    } \n\n    // добавляем новую карточку\n    addCard(data) {\n       return fetch(`${this._address}/cards`, {\n           method: 'POST',\n           headers: this._headers,\n           body: JSON.stringify ({\n               name: data.mesto,\n               link: data.link,\n               id: data.id\n           })\n       })\n       .then(this._handleResponse);\n  \n    } \n\n    // отправляем информацию об удалении карточки\n    deleteCard(id) {\n        return fetch(`${this._address}/cards/${id}`, {\n           method: 'DELETE',\n           headers: this._headers\n        })\n        .then(this._handleResponse);\n\n    }\n\n    // отправляем информацию о лайке\n    putLikes(id) {\n       return fetch(`${this._address}/cards/${id}/likes`, {\n           method: 'PUT',\n           headers: this._headers\n       })\n       .then(this._handleResponse)\n       \n    }\n\n    // отправляем информацию об удалении лайка\n    deleteLikes(id) {\n       return fetch(`${this._address}/cards/${id}/likes`, {\n           method: 'DELETE',\n           headers: this._headers\n       })\n       .then(this._handleResponse)\n       \n    }\n\n};\n\n// подключаем к серверу\nconst api = new Api({\n    address: 'https://mesto.nomoreparties.co/v1/cohort-35',\n    headers: {\n        authorization: '4720a964-d446-4c50-91af-e4bae21204bc',\n        'Content-Type': 'application/json'\n    }\n    \n  });\n\nexport default api;\n  "]},"metadata":{},"sourceType":"module"}